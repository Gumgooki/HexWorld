import React from 'react';
// import p5 from 'p5';
import { connect } from 'react-redux';
import P5Wrapper from 'react-p5-wrapper';
//test
import store from '../store';

const WrapperHex = function (p) {
  const state = store.getState();
  let r, s;
  let hexagons;
  let testNumber;
  let hexColor;
  let imageHueAlpha;
  let img = state.image.image;

  function hexagon(x, y, r) {
    p.beginShape();
    for (let a = 0; a < 2 * p.PI; a += (2 * p.PI) / 6) {
      let x2 = p.cos(a) * r;
      let y2 = p.sin(a) * r;
      p.vertex(x + x2, y + y2);
    }
    p.endShape(p.CLOSE);
  }
  class Hexagon {
    constructor(x, y, r, name) {
      this.x = x;
      this.y = y;
      this.r = r;
      this.name = name;
    }

    render() {
      p.noFill();
      p.stroke(hexColor);
      p.strokeWeight(1);
      hexagon(this.x, this.y, this.r);
      p.stroke('#000000');
      p.strokeWeight(1.5 * testNumber);
      p.textSize(15 * testNumber);
      p.text(this.name, this.x, this.y);
    }
  }
  // p.preload = function () {
  //   // img = p.loadImage(img);
  //   // img.hide();
  // };
  p.setup = function () {
    p.createCanvas(1500, 800);
    img = p.loadImage(img);
    // img = p.createImg(img);
    //need to hide this image for some reason, kind of a weird quirk?
    // img.hide();
    p.textAlign(p.CENTER, p.CENTER);
  };

  p.myCustomRedrawAccordingToNewPropsHandler = function (props) {
    if (props.testNumber) {
      testNumber = props.testNumber;
    }
    if (props.hexColor) {
      hexColor = p.color(
        props.hexColor.r,
        props.hexColor.g,
        props.hexColor.b,
        props.hexColor.a * 1000
      );
    }
    if (props.imageHue) {
      imageHueAlpha = p.color(
        props.imageHue.r,
        props.imageHue.g,
        props.imageHue.b,
        props.imageHue.a * 1000
      );
    }
  };

  p.draw = () => {
    //changing scale will adjust how zoomed the image is, but will also not utilize part of the canvas. Current implementation means there will be blank hexes
    var scale = 1;
    p.imageMode(p.CENTER);
    p.tint(imageHueAlpha);
    p.image(
      img,
      0.5 * p.width,
      0.5 * p.height,
      scale * p.width,
      (scale * img.height * p.width) / img.width
    );
    r = 50 * testNumber;
    s = p.sqrt((3 * p.pow(r, 2)) / 4);
    hexagons = [];

    // create hexagons
    let counter = 0;
    for (let y = 0; y < p.height + s; y += 2 * s) {
      for (let x = 0; x < p.width + r; x += 3 * r) {
        hexagons.push(new Hexagon(x, y, r, counter++));
        hexagons.push(new Hexagon(x + 1.5 * r, y + s, r, counter++));
      }
    }

    let nearestHexagon;
    hexagons.forEach((h) => {
      h.render();
      if (nearestHexagon === undefined) {
        nearestHexagon = h;
      }
    });
    p.stroke(0);
    p.line(nearestHexagon.x, nearestHexagon.y);
  };
};

export default WrapperHex;
